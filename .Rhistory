'Cluster_9',
'Cluster_10')
social_cluster1_main$type = row.names(social_cluster1_main)
#Cluster 1
ggplot(social_cluster1_main, aes(x =reorder(type, -Cluster_1) , y=Cluster_1)) +
geom_bar(stat="identity", position ="dodge") +
theme_economist() +
theme(axis.text.x = element_text(angle=-42, hjust=.2)) +
labs(title="Cluster 1",
x ="Category", y = "Centre Values")
#Cluster 2
ggplot(social_cluster1_main, aes(x =reorder(type, -Cluster_2) , y=Cluster_2)) +
geom_bar(stat="identity", position ="dodge") +
theme_economist() +
theme(axis.text.x = element_text(angle=-42, hjust=.2)) +
labs(title="Cluster 2",
x ="Category", y = "Cluster Centre")
#Cluster 3
ggplot(social_cluster1_main, aes(x =reorder(type, -Cluster_3) , y=Cluster_3)) +
geom_bar(stat="identity", position ="dodge") +
theme_economist() +
theme(axis.text.x = element_text(angle=-42, hjust=.2)) +
labs(title="Cluster 3",
x ="Category", y = "Cluster Centre")
#Cluster 4
ggplot(social_cluster1_main, aes(x =reorder(type, -Cluster_4) , y=Cluster_4)) +
geom_bar(stat="identity", position ="dodge") +
theme_economist() +
theme(axis.text.x = element_text(angle=-42, hjust=.2)) +
labs(title="Cluster 4",
x ="Category", y = "Cluster Centre")
#Cluster 5
ggplot(social_cluster1_main, aes(x =reorder(type, -Cluster_5) , y=Cluster_5)) +
geom_bar(stat="identity", position ="dodge") +
theme_economist() +
theme(axis.text.x = element_text(angle=-42, hjust=.2)) +
labs(title="Cluster 5",
x ="Category", y = "Cluster Centre")
#Cluster 6
ggplot(social_cluster1_main, aes(x =reorder(type, -Cluster_6) , y=Cluster_6)) +
geom_bar(stat="identity", position ="dodge") +
theme_economist() +
theme(axis.text.x = element_text(angle=-42, hjust=.2)) +
labs(title="Cluster 6",
x ="Category", y = "Cluster Centre")
#Cluster 7
ggplot(social_cluster1_main, aes(x =reorder(type, -Cluster_7) , y=Cluster_7)) +
geom_bar(stat="identity", position ="dodge") +
theme_economist() +
theme(axis.text.x = element_text(angle=-42, hjust=.2)) +
labs(title="Cluster 7",
x ="Category", y = "Cluster Centre")
#Cluster 8
ggplot(social_cluster1_main, aes(x =reorder(type, -Cluster_8) , y=Cluster_8)) +
geom_bar(stat="identity", position ="dodge") +
theme_economist() +
theme(axis.text.x = element_text(angle=-42, hjust=.2)) +
labs(title="Cluster 8",
x ="Category", y = "Cluster Centre")
#Cluster 9
ggplot(social_cluster1_main, aes(x =reorder(type, -Cluster_9) , y=Cluster_9)) +
geom_bar(stat="identity", position ="dodge") +
theme_economist() +
theme(axis.text.x = element_text(angle=-42, hjust=.2)) +
labs(title="Cluster 9",
x ="Category", y = "Cluster Centre")
#Cluster 10
ggplot(social_cluster1_main, aes(x =reorder(type, -Cluster_10) , y=Cluster_10)) +
geom_bar(stat="identity", position ="dodge") +
theme_economist() +
theme(axis.text.x = element_text(angle=-42, hjust=.2)) +
labs(title="Cluster 10",
x ="Category", y = "Cluster Centre")
library(igraph)
library(arules)
library(arulesViz)
# load in the data as transactions class
grocery_raw = read.transactions('groceries.txt', sep=',')
# plot the items and their frequencies
itemFrequencyPlot(grocery_raw, topN=10)
# run apriori algorithm with limits
grocery_rules = apriori(grocery_raw, parameter=list(support=0.005, confidence=0.25, minlen = 2))
# graph based visualization
grocery_graph = associations2igraph(subset(grocery_rules, subset = lift > 3), associationsAsNodes = FALSE)
igraph::write_graph(grocery_graph, file='groceries.graphml', format = "graphml")
# insert network from gephi
knitr::include_graphics("grocery_rules_lift.png")
# find the rules with the most confidence
conf = sort(grocery_rules, by="confidence")[1:30]
# graph based visualization
conf_graph = associations2igraph(conf, associationsAsNodes = FALSE)
igraph::write_graph(conf_graph, file='conf.graphml', format = "graphml")
# insert network from gephi
knitr::include_graphics("conf_graph.png")
setwd("~/GitHub/STA-380-Exercises")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# insert network from gephi
error_file = magick::image_read("grocery_rules_lift.png")
right_png = magick::image_convert(error_file, "png")
magick::image_write(right_png, path = "fig/sbs_signature_overview_nat_review2.png", format = "png")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# insert network from gephi
error_file = magick::image_read("grocery_rules_lift.png")
right_png = magick::image_convert(error_file, "png")
magick::image_write(right_png, path = "grocery_rules_lift.png", format = "png")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# find the rules with the most confidence
conf = sort(grocery_rules, by="confidence")[1:30]
# graph based visualization
conf_graph = associations2igraph(conf, associationsAsNodes = FALSE)
igraph::write_graph(conf_graph, file='conf.graphml', format = "graphml")
# insert network from gephi
knitr::include_graphics("conf_graph.png")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# find the rules with the most confidence
conf = sort(grocery_rules, by="confidence")[1:30]
# graph based visualization
conf_graph = associations2igraph(conf, associationsAsNodes = FALSE)
igraph::write_graph(conf_graph, file='conf.graphml', format = "graphml")
# insert network from gephi
error_file = magick::image_read("conf_graph.png")
right_png = magick::image_convert(error_file, "png")
magick::image_write(right_png, path = "conf_graph.png", format = "png")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# insert network from gephi
# error_file = magick::image_read("grocery_rules_lift.png")
# right_png = magick::image_convert(error_file, "png")
# magick::image_write(right_png, path = "grocery_rules_lift.png", format = "png")
knitr::include_graphics("grocery_rules_lift.png")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# insert network from gephi
# error_file = magick::image_read("grocery_rules_lift.png")
# right_png = magick::image_convert(error_file, "png")
# magick::image_write(right_png, path = "grocery_rules_lift.png", format = "png")
knitr::include_graphics("grocery_rules_lift.png")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# find the rules with the most confidence
conf = sort(grocery_rules, by="confidence")[1:30]
# graph based visualization
conf_graph = associations2igraph(conf, associationsAsNodes = FALSE)
igraph::write_graph(conf_graph, file='conf.graphml', format = "graphml")
# insert network from gephi
# error_file = magick::image_read("conf_graph.png")
# right_png = magick::image_convert(error_file, "png")
# magick::image_write(right_png, path = "conf_graph.png", format = "png")
knitr::include_graphics("conf_graph.png")
View(data)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
library(tm)
library(tidyverse)
library(slam)
library(proxy)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
readerPlain = function(fname){
readPlain(elem=list(content=readLines(fname)),
id=fname, language='en') }
## Test it on Adam Smith
adam = readerPlain("../data/division_of_labor.txt")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
readerPlain = function(fname){
readPlain(elem=list(content=readLines(fname)),
id=fname, language='en') }
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
readerPlain = function(fname){
readPlain(elem=list(content=readLines(fname)),
id=fname, language='en') }
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
file_list = Sys.glob('BernardHickey/*.txt')
bernard = lapply(file_list, readerPlain)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
file_list
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
readerPlain = function(fname){
readPlain(elem=list(content=readLines(fname)),
id=fname, language='en') }
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
file_list = Sys.glob('BernardHickey/*.txt')
bernard = lapply(file_list, readerPlain)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
file_list
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
mynames = file_list %>%
{ strsplit(., '/', fixed=TRUE) } %>%
{ lapply(., tail, n=2) } %>%
{ lapply(., paste0, collapse = '') } %>%
unlist
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
mynames
names(bernard) = mynames
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
documents_raw = Corpus(VectorSource(bernard))
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
my_documents = documents_raw
my_documents = tm_map(my_documents, content_transformer(tolower)) # make everything lowercase
my_documents = tm_map(my_documents, content_transformer(removeNumbers)) # remove numbers
my_documents = tm_map(my_documents, content_transformer(removePunctuation)) # remove punctuation
my_documents = tm_map(my_documents, content_transformer(stripWhitespace)) ## remove excess white-space
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
stopwords("en")
stopwords("SMART")
?stopwords
my_documents = tm_map(my_documents, content_transformer(removeWords), stopwords("en"))
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
DTM_bernard = DocumentTermMatrix(my_documents)
DTM_bernard # some basic summary statistics
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
class(DTM_bernard)  # a special kind of sparse matrix format
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
inspect(DTM_bernard[1:10,1:20])
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
findFreqTerms(DTM_bernard, 50)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
findAssocs(DTM_bernard, "genetic", .5)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
DTM_bernard = removeSparseTerms(DTM_bernard, 0.95)
DTM_bernard # now ~ 1000 terms (versus ~3000 before)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
tfidf_simon = weightTfIdf(DTM_bernard)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
tfidf_bernard = weightTfIdf(DTM_bernard)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
inspect(tfidf_bernard[1,])
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
content(bernard[[1]])
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
X = as.matrix(tfidf_bernard)
summary(colSums(X))
scrub_cols = which(colSums(X) == 0)
X = X[,-scrub_cols]
pca_bernard = prcomp(X, rank=2, scale=TRUE)
plot(pca_bernard)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
pca_bernard$rotation[order(abs(pca_simon$rotation[,1]),decreasing=TRUE),1][1:25]
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
pca_bernard$rotation[order(abs(pca_bernard$rotation[,1]),decreasing=TRUE),1][1:25]
pca_bernard$rotation[order(abs(pca_bernard$rotation[,2]),decreasing=TRUE),2][1:25]
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
pca_bernard$x[,1:2]
plot(pca_bernard$x[,1:2], xlab="PCA 1 direction", ylab="PCA 2 direction", bty="n",
type='n')
text(pca_bernard$x[,1:2], labels = 1:length(bernard), cex=0.7)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
content(bernard[[46]])
content(bernard[[48]])
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
content(bernard[[25]])
content(bernard[[26]])
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
content(bernard[[10]])
content(bernard[[11]])
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
dist_mat = dist(pca_bernard$x)
tree_bernard = hclust(dist_mat)
plot(tree_bernard)
clust5 = cutree(tree_bernard, k=5)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
which(clust5 == 3)
content(bernard[[18]])
content(bernard[[19]])
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
bernard[[10]]
# content(bernard[[11]])
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
bernard[25]
# content(bernard[[26]])
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
bernard[26]
# content(bernard[[26]])
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
content(bernard[[25]])
content(bernard[[26]])
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
pca_bernard$x
# dist_mat = dist(pca_bernard$x)
# tree_bernard = hclust(dist_mat)
# plot(tree_bernard)
# clust5 = cutree(tree_bernard, k=5)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# pca_bernard$x
dist_mat = dist(pca_bernard$x)
dist_mat
# tree_bernard = hclust(dist_mat)
# plot(tree_bernard)
# clust5 = cutree(tree_bernard, k=5)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# pca_bernard$x
dist_mat = dist(pca_bernard$x)
# dist_mat
tree_bernard = hclust(dist_mat)
plot(tree_bernard)
clust5 = cutree(tree_bernard, k=5)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
which(clust5 == 3)
content(bernard[[18]])
content(bernard[[16]])
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
findAssocs(DTM_bernard, "tax", .5)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
content(bernard[[48]])
content(bernard[[50]])
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
content(bernard[[28]])
content(bernard[[29]])
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
content(bernard[[9]])
content(bernard[[10]])
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
mynames = file_list %>%
{ strsplit(., '/', fixed=TRUE) } %>%
{ lapply(., tail, n=2) } %>%
{ lapply(., paste0, collapse = '') } %>%
unlist
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
readerPlain = function(fname){
readPlain(elem=list(content=readLines(fname)),
id=fname, language='en') }
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
file_list
mynames = file_list %>%
{ strsplit(., '/', fixed=TRUE) } %>%
{ lapply(., tail, n=2) } %>%
{ lapply(., paste0, collapse = '') } %>%
unlist
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
knitr::kable(findFreqTerms(DTM_bernard, 50), caption="Frequent terms")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
findAssocs(DTM_bernard, "tax", .5)
findAssocs(DTM_bernard, "media", .5)
findAssocs(DTM_Bernard, "plane", .5)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
findAssocs(DTM_bernard, "tax", .5)
findAssocs(DTM_bernard, "media", .5)
findAssocs(DTM_bernard, "plane", .5)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
knitr::kable(findAssocs(DTM_bernard, "tax", .5) , caption="Word associated with tax")
knitr::kable(findAssocs(DTM_bernard, "media", .5) , caption="Words associated with media")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
DTM_bernard = removeSparseTerms(DTM_bernard, 0.95)
DTM_bernard # now ~ 1000 terms (versus ~3000 before)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
tfidf_bernard = weightTfIdf(DTM_bernard)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
knitr::kable(content(bernard[[9]]), caption="Word associated with tax")
knitr::kable(findAssocs(DTM_bernard, "tax", .5) , caption="Word associated with tax")
content(bernard[[10]])
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
knitr::kable(content(bernard[[9]]), caption="Document 9")
knitr::kable(content(bernard[[10]])) , caption="Document 10")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
knitr::kable(content(bernard[[28]]), caption="Document 28")
knitr::kable(content(bernard[[29]]), caption="Document 29")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
knitr::kable(content(bernard[[9]]), caption="Document 9")
knitr::kable(content(bernard[[10]]), caption="Document 10")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# run apriori algorithm with limits
grocery_rules = apriori(grocery_raw, parameter=list(support=0.005, confidence=0.25, minlen = 2))
# graph based visualization
grocery_graph = associations2igraph(subset(grocery_rules, subset = lift > 3), associationsAsNodes = FALSE)
igraph::write_graph(grocery_graph, file='groceries.graphml', format = "graphml")
grocery_rules
conf
conf[1:30,]
inspect(conf)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
which(clust5 == 3)
knitr::kable(content(bernard[[16]]), caption="Document 16")
knitr::kable(content(bernard[[18]]), caption="Document 18")
inspect(conf)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
library(igraph)
library(arules)
library(arulesViz)
# load in the data as transactions class
grocery_raw = read.transactions('groceries.txt', sep=',')
# plot the items and their frequencies
itemFrequencyPlot(grocery_raw, topN=10)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# run apriori algorithm with limits
grocery_rules = apriori(grocery_raw, parameter=list(support=0.005, confidence=0.25, minlen = 2))
# graph based visualization
grocery_graph = associations2igraph(subset(grocery_rules, subset = lift > 3), associationsAsNodes = FALSE)
igraph::write_graph(grocery_graph, file='groceries.graphml', format = "graphml")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# insert network from gephi
# error_file = magick::image_read("grocery_rules_lift.png")
# right_png = magick::image_convert(error_file, "png")
# magick::image_write(right_png, path = "grocery_rules_lift.png", format = "png")
knitr::include_graphics("grocery_rules_lift.png")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# find the rules with the most confidence
conf = sort(grocery_rules, by="confidence")[1:30]
# graph based visualization
conf_graph = associations2igraph(conf, associationsAsNodes = FALSE)
igraph::write_graph(conf_graph, file='conf.graphml', format = "graphml")
# insert network from gephi
# error_file = magick::image_read("conf_graph.png")
# right_png = magick::image_convert(error_file, "png")
# magick::image_write(right_png, path = "conf_graph.png", format = "png")
knitr::include_graphics("conf_graph.png")
inspect(conf)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
tfidf_bernard = weightTfIdf(DTM_bernard)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
knitr::kable(content(bernard[[1]]), caption="Document 1")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
pca_bernard$x[,1:2]
plot(pca_bernard$x[,1:2], xlab="PCA 1 direction", ylab="PCA 2 direction", bty="n",
type='n')
text(pca_bernard$x[,1:2], labels = 1:length(bernard), cex=0.7)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# pca_bernard$x
dist_mat = dist(pca_bernard$x)
# dist_mat
tree_bernard = hclust(dist_mat)
plot(tree_bernard)
clust5 = cutree(tree_bernard, k=5)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# knitr::kable(findAssocs(DTM_bernard, "tax", .5) , caption="Word associated with tax")
knitr::kable(findAssocs(DTM_bernard, "media", .5)[1:10,] , caption="Words associated with media")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# knitr::kable(findAssocs(DTM_bernard, "tax", .5) , caption="Word associated with tax")
knitr::kable(head(findAssocs(DTM_bernard, "media", .5), 10) , caption="Words associated with media")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# knitr::kable(findAssocs(DTM_bernard, "tax", .5) , caption="Word associated with tax")
knitr::kable(head(findAssocs(DTM_bernard, "media", .5), 5) , caption="Words associated with media")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# knitr::kable(findAssocs(DTM_bernard, "tax", .5) , caption="Word associated with tax")
knitr::kable(head(findAssocs(DTM_bernard, "media", .5)) , caption="Words associated with media")
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(echo = FALSE)
# knitr::kable(findAssocs(DTM_bernard, "tax", .5) , caption="Word associated with tax")
knitr::kable(head(findAssocs(DTM_bernard, "media", .5), 1) , caption="Words associated with media")
